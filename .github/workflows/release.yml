name: Release

on:
  push:
    tags:
      - 'v*.*.*'

jobs:
  release:
    runs-on: ubuntu-latest
    
    permissions:
      contents: write
      id-token: write
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'
        registry-url: 'https://registry.npmjs.org'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Run tests
      run: npm test
    
    - name: Build project
      run: npm run build
    
    - name: Extract version from tag
      id: version
      run: echo "VERSION=${GITHUB_REF#refs/tags/v}" >> $GITHUB_OUTPUT
    
    - name: Update package.json version
      run: |
        npm version ${{ steps.version.outputs.VERSION }} --no-git-tag-version
    
    - name: Generate changelog
      id: changelog
      run: |
        # Create changelog entry
        echo "## [${{ steps.version.outputs.VERSION }}] - $(date +'%Y-%m-%d')" > RELEASE_NOTES.md
        echo "" >> RELEASE_NOTES.md
        
        # Get commits since last tag
        LAST_TAG=$(git describe --tags --abbrev=0 HEAD^ 2>/dev/null || echo "")
        if [ -n "$LAST_TAG" ]; then
          echo "### Changes since $LAST_TAG:" >> RELEASE_NOTES.md
          git log --pretty=format:"- %s (%h)" $LAST_TAG..HEAD >> RELEASE_NOTES.md
        else
          echo "### Initial Release" >> RELEASE_NOTES.md
          echo "- First stable release of MCP Web Scrape" >> RELEASE_NOTES.md
        fi
        
        echo "" >> RELEASE_NOTES.md
        echo "### Installation" >> RELEASE_NOTES.md
        echo "\`\`\`bash" >> RELEASE_NOTES.md
        echo "npm install -g mcp-web-scrape@${{ steps.version.outputs.VERSION }}" >> RELEASE_NOTES.md
        echo "\`\`\`" >> RELEASE_NOTES.md
    
    - name: Update CHANGELOG.md
      run: |
        if [ ! -f CHANGELOG.md ]; then
          echo "# Changelog" > CHANGELOG.md
          echo "" >> CHANGELOG.md
          echo "All notable changes to this project will be documented in this file." >> CHANGELOG.md
          echo "" >> CHANGELOG.md
          echo "The format is based on [Keep a Changelog](https://keepachangelog.com/en/1.0.0/)," >> CHANGELOG.md
          echo "and this project adheres to [Semantic Versioning](https://semver.org/spec/v2.0.0.html)." >> CHANGELOG.md
          echo "" >> CHANGELOG.md
        fi
        
        # Insert new changelog entry after the header
        sed -i '6r RELEASE_NOTES.md' CHANGELOG.md
    
    - name: Publish to npm
      run: npm publish --provenance --access public
      env:
        NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
    
    - name: Setup Node.js for GitHub Package Registry
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        registry-url: 'https://npm.pkg.github.com'
        scope: '@mukul975'
    
    - name: Publish to GitHub Package Registry
      run: |
        # Create a scoped package.json for GitHub packages
        cp package.json package.json.backup
        sed 's/"name": "mcp-web-scrape"/"name": "@mukul975\/mcp-web-scrape"/' package.json > package-github.json
        mv package-github.json package.json
        npm publish
        # Restore original package.json
        mv package.json.backup package.json
      env:
        NODE_AUTH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Create GitHub Release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref }}
        release_name: Release v${{ steps.version.outputs.VERSION }}
        body_path: RELEASE_NOTES.md
        draft: false
        prerelease: false
    
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: dist-${{ steps.version.outputs.VERSION }}
        path: dist/
        retention-days: 30
    
    - name: Notify Discord (optional)
      if: env.DISCORD_WEBHOOK_URL != ''
      run: |
        curl -H "Content-Type: application/json" \
             -d '{
               "embeds": [{
                 "title": "ðŸš€ New Release: v${{ steps.version.outputs.VERSION }}",
                 "description": "MCP Web Scrape has been updated!",
                 "color": 5763719,
                 "fields": [
                   {
                     "name": "Version",
                     "value": "v${{ steps.version.outputs.VERSION }}",
                     "inline": true
                   },
                   {
                     "name": "Install",
                     "value": "`npm install -g mcp-web-scrape@${{ steps.version.outputs.VERSION }}`",
                     "inline": false
                   }
                 ],
                 "url": "https://github.com/${{ github.repository }}/releases/tag/v${{ steps.version.outputs.VERSION }}"
               }]
             }' \
             ${{ env.DISCORD_WEBHOOK_URL }}
      env:
        DISCORD_WEBHOOK_URL: ${{ secrets.DISCORD_WEBHOOK_URL }}

  docker:
    runs-on: ubuntu-latest
    needs: release
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Login to Docker Hub
      if: env.DOCKER_USERNAME != ''
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}
      env:
        DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
    
    - name: Extract version from tag
      id: version
      run: echo "VERSION=${GITHUB_REF#refs/tags/v}" >> $GITHUB_OUTPUT
    
    - name: Build and push Docker image
      if: env.DOCKER_USERNAME != ''
      uses: docker/build-push-action@v5
      with:
        context: .
        push: true
        tags: |
          ${{ secrets.DOCKER_USERNAME }}/mcp-web-scrape:latest
          ${{ secrets.DOCKER_USERNAME }}/mcp-web-scrape:v${{ steps.version.outputs.VERSION }}
        platforms: linux/amd64,linux/arm64
      env:
        DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}